                JavaScript

-js is light weight  JIT[just in time] compile program language.

Q.What is JIT?
  -there are two type of compiling technique:
  a) JIT [just in time]
  b) AOT [Ahead of time]

  --JIT compile logic in browser
  --AOT compile logic in app level

Js support various programming technique and approach:-

a) Functional programming
b) Structure programming
c) Imperative programming
d) Object Oriented programming

Js is not an OOP language , it support only few features of oops

Js is used in -
               client side =html
               server side =node.js
               database =mongoDb
               animation =Flash /CAD -[buildimg map civil branch]


evolution

1st browser "mosaic"
  GML,SGML = Presentation
  ECMA = Client side

 1990: Tim Berner Lee introduced html
  1994 :netscape communication - develop browser 


javascript with html [client side]

js is used client side in order to reduce the burden on server 
 via handling validation + Handling interaction + DOM manipulation[CRUD]

Q.What is the role of Js?
 -DOM manipulation

 integrated js into page :-
 Inline
 embedded
 external

 inline 
 eg:-
 <button oncick="window.print()>Print</button>

 embedded
 eg:-
 <script type="text/javascript">
 function printPage(){
   window.print()
 }
 </script>


 How Js refer HTML elements ?
-via DOM hierarchy[this is good not not used now-a-days becuase whenever the dom elements position are change then its dom upadte are needed to update .it is fast but not prefer]

you can refer by using "ID"
  document.getElementById()

id had conflict with css reference
id is not require if you accessing direct element

-js can refer by using "css selector

syntax:
       document.querySelector("h2")-->//type selector

       document.querySelector("#pic)-->id selector

       document.querySelector(".pic)-->class selector



Js Output technique

-alert()
-confirm()
-console.log() ,warn(),success() ,error(), debug(),info() etc..
-innerHTML
-innerText
-outerHTML
-document.write()


#JavaScript Input techniques:

-prompt()
-form input elements

prompt():-
   -it is like alert with input.

   prompt("your message","default value);

   prompt return 
       null - on cancel
       ""[empty]

 #every form element have reference id  
     <input type="text" id="txtName">
     <select id="lstCities">
     <input type="checkbox" id="optStock">

you can access elemnet and use its properties:

document.getElementById("txtName").value;
document.getElementById("lstCities").value;
document.getElementById("optStock").checked;

Q. what is the strict mode of JavaScript?
-strict mode for js allow to reduce code in-consistency 
-so that developer has to follow the coding standard 

<script>
"use strict"
x=10; //invalid -x is not define
document.write("x=" + x);
</script>


Q.how to write the JavaScript for legacy browser?[old version]

- by enclosing the code in html comment

Q. how to js comment 
// single line comment 
/* */ multi line comment
/// xml comment


--------l-52 start here----------

JavaScript language basic:-
 
Variable:-
-variable are storage location in memory where you can store a valueand use it as a part of expression
-



var x;
document.write("x=" + x);

Q.can a const change its value ?
- dynamically yes .


Global scope for variable :
-you can declare a variable in the module scope


#variable in javascript can be declare by using :-

a.) var 
b.) let 
c.) const

var :-
-it define a scope variable
-you can declare in any block of a function and access from any another block in function .
-var allow declaring, initialization,assigning
-var allow shadowing 
-var allow hoisting 

Q. what is shadowing ?
 - it is the process of re declaring same  name identifier within the scope .

 Q.) what is hoisting
  - it is a compiling technique ,where compiler can find declarations of variable before using it . hence you can use a variable before declaring .
eg:-

<script>
"use strict";
function f1(){
  x=10;
  document.write("x="+x);
  var x;
  }
  f1();
</script>


#let

-it is used to define block scope variable.
it is accessible only in block where it is declared or to its inner blocks .
-it allow declaring,assigning,initialize
-it will not allow shadowing and hoisting in "let"

 
const 
-it is used to define the block scope variable.
-it will allow only initialization
-no declaration
-no assigning
-no hoisting

Q.why we need a const ?
-const is require to initialize memory at the time of loading application or component 
-memory is initialize with some default value .
-if initialization is missing then by default value will be "undefined"

Q. cam we declare a global variable inside a function ?
 - yes , by browser window function

 function f1(){
  window.y = 20;
 }
function f2(){
  document.write("y=20" + y);
}
eg:-


#Variable Naming :-

   - Variable Name must starts with alhpabet or underscore.
  -variable name cannot exceed more than 255 charecter.
  -dont use language keyword for variable name 
  -always variable must speak what it is.

  eg:-
  var employee = new Employee();
  var product = new Product();
  var temporaryEmployee = new TemporaryEmployee();

      Data Types:-

  - it define the data structure .
  - data type determine the size and type of data.
  - data type are classified into 2 types:-

    - 1.) Primitive data type
    - 2.) Non Primitive Data type

Primitive data type:-

 - primitive data type are immutable types .
 - their structure will not change .
 - they fixed range for value .
 - value range can't change .
 - they use memory stack .
 - stack use "LIFO" [LAST IN FIRST OUT].
 -JS is primitive type :-

       a). Number
       b). String
       c). Boolean
       d). Null 
       e). undefined

  JavaScript is not a strongly typed . it is implicitly typed.

 var x= 10 ; // x is number 
 x = "john" // x is string.

  js number type refer to -
   -signed integer  [ -number]
   -Unsigned integer [+number]
   -floating point [24.56]
   -double [334.56 ,567.876]
   -decimal [29 decimal point]
   -exponent
   -binary
   -octa
   -hexa

js uses "isNan()" method to verify the number .

js cant identify a numeric value in string format . you have to explicitly convert into number by using following method 

 a).parseInt()
 b).parseFloat()


NOTE:-

# whatever input you get in html via form is string type so you need to convert it into other type .


var a ="10ab";
var b = 20;
var c = parseInt(a)+b;
 
 a= "ab20 // invalid
 a = "10ag23" //10 valid 

 10 +true = 11 //only in js 

 #String type :-

 string is a literal with group of characters enclosed in -

   a).single quote ['']
   b).double quote [""]
   c).back tick [``]

-single and double quote are used to configure inner and outer string combination

var link = "<a href='home.html'></a>"


#String handling in javascript:-

-js  provide a set of method and property to format and manipulate string .

String formatting method:-

-bold
-italic
-sup()
-sub()
-fontColor()
-fontSize()
-toUpperCase()
-toLowerCase()

eg:-
syntax:-

var msg = "welcome to js"
msg.bold().italics().fontColor('green');


#String Property:-

-length : return the total number of characters

-DRY = DO NOT REPEAT YOURSELF 

onkeyup = help for button reusability.

-onkeyup : action to perform when key is release.

-onblur : action to perform wen control is blured.

-onclick : action to performed when clicked 

onload : action to perform on page or image load.

#String manipulation:-

1.) charAt() :-
    it return the characters at specified index .

2.) CharCodeAt() :-
    it return the characters at ASCII code at specified index .

3.) slice()
4.) substr()
5.) substr()
6.) substring()
  
Q.what is difference b/w slice() , substr() and substring() ?

-slice(): it can read the char b/w specified start and end index.
-if end is not define , then it will read upto end of string .
-end index must be greater than start index.

string.slice(0,7) // 0to7
string.slice(7) // 7 to end
string.slice(7,0) // invalid 

syntax:-
 slice(startIndex, endIndex);

 -SubStr():-

 it can read specified number of char from given index number .

syntax:-

substr(startIndex, countOfChars);

string.substr(7.3) // from 7 index it will read 
3 characters


substring():-

it can read from specified index to any direction.

syntax:-

substring(startIndex, endIndex);

note:

endIndex can be less than start index.

==================

indexOf() and lastIndexOf():~

-these are the function , which can find any charecter in a string and return its position. 
- if charecter not found then it return -1 [ie,. charecter is not present]

-lastIndexOf() :~
 it will return the lasts occurance index .

================

startWith() and endWith():~

-these are function used to verify the starting and ending char in a string .

-these function return the boolean true when string is starting or ending with specific char.

==========
#match() :~
it is used to verify and compare given string with any regular expression . it return true if string format is as per regular expression pattern

#trim() and split():-

-trim is used to remove the leading spaces in a string .

-split() 


==========L-56============

# Null type 

-it is an exceptional type.
-exception occurs at run time.
-null indicate that value is not supplied during run time.
-you can verify null type by using"null" 

summary of primitive type:-

-number = numeric value
-string  = literal
-boolean = true/false
-null = no value at run time
-undefined = no value at compile time

            Non-Primtive types:~
      __________________________

 -they are mutable types.
 -they can change the structure according to state and situation .
 -there is no fixed range for value.
 -value range varies according to memory  available.
 -they are stored in heap memory
 -JavaScript non primitive types are:~
             1.) Array
             2.) Object
             3.) map

 # Array type:~

 Queue : FIFO

 Stack : LIFO eg.[browser history]

  Array :~

 -Array mean organizing in order and accessing in random order

 -Stack mean organizing in order and accessing the last one first.[LIFO]

 -Queue mean organizing in order and accessing the first one first . [FIFO].

Q. what is purpose of Array ?
    
    -array is used in computer programming to reduce overhead and complexity.
    -
    -array will reduce the complexity by storing multiple value in sequential order.
    -array will reduce complexity by storing multiple value under one name.
    -array can handle any type of value.
    -array size can be changed dynamically.


    NOTE:-

    few technology cant allocate various type of memory in sequential order hence they restrict array to same type of value and size cant be changed dynamically .

    eg:~ [C, C++,JAVA,.NET]

    Configure array :~

    1.) Declaring array
    2.) initialization of memory for array 

  declaring array:-

     var arrayName;
     var products;
     var categories;


 initialization of memory

  var arrayNAME =[];
  var arrayName = Array();

Q.) What is difference b/w array "[]" meta charcter and "array()" constructor ?

array constructor can define the size of array . however size can be changed dynamically.


#Storing value into array :~

-values are stored and accessed from an array by using property.
-property map to index in memory 

let values = new Array(10, 20, 30, 40);

Reading the value of array :~

1.) Reference of property
    -value["0"];
    -values["1"];

2.) Array method 


     -toString();  => read and return all array elements  in string format .  [,]
     
     -join(); => reads and return all elements with custom delimiter ie., [separater]
     
     -slice(); =>read element b/w specified index.
     
     -filter(); =>return all elements that match given condition.
     
     -find(); => return the first element that match the given condition. 
     
     -map(); => it is an iterator for presenting elements. it is software design pattern.
       -it can read element from a collection in sequential order , it does'nt require any condition , initialization and counter .

#Reding values by using loops and external iterators 

loops:-
  [they are rarely used].

1.)for() =>
2.)while()=>
3.)do while() =>

modern loops:~

1.)for..in // iterator of property 
2.) for..of // iterator of values.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Dynamically creating and adding DOM elements using array :-

1). you can create HTML elements using javascript by using 

-document.createElement("elementName");

eg:-

document.createElement("h2");
document.createElement("img");

2). you can add elements dynamically into page by method 
   -appendChild();
   -append()
   -prepend();

  ~~~~~~~~~~~~~L-57 end here~~~~~~~~
  

Q. What type of data we can store in array?
  - can store both primitive + non primitive types data.

 Q. why we need function in array ?
   - array is defined with function to handle call back mechanism. call back is a technique where function will execute according to situation.

NOTE:~

function in array must be anonymous function. anonymous function will jot have a name .
    eg:-
         function(){} //anonymous function
         function sucess()()  //invalid in array.

Adding value into array:-

1.) push() => Add new value as lats element
2.) unshift() => add new value as first element
3.) splice()=> add new value at any specific position

syntax:

arrayName.push("item1","item2")

arrayName.unshift("item1","item2");

arrayName.splice(startIndex,deleteCount,"item1","item2");


# Removing values from array :-

1.) pop() => it remove and return the last item.

2.) shift() => it remove and return the first item .

3.) splice() => it remove and return the item at specific index.

arrayName.splice(startIndex,deleteCount);


#Sorting array elements:-

1.) Sort() => it sort the item in ascending order.

2.) Reverse() => it sort the items in reverse order of their occurance.

syntax:

arrayName.sort()

arrayName.reverse()


~~~~~~~~~L-58 end here ~~~~~~~~~~~

  Object types:~

  - introduced in 1960 by "alan kay " 
  - to keep related data logic under one reference .
  - object store data in property and define logic using function.
  -object is a key and value collection.
  - key are string type .
  - value can be any type .

  syntax : 
  let object ={
    "key": value,
    "key": function(){},
  }

  eg:-

  let tv ={
    "name": "sumsung",
    "price":50000,
    "stock":true,
    "qty":2,
    "total":function(){}
  }


NOTE:~

-The property of an object can be accessed through by using "this" keyword.

-outside object you can access with the reference of object name .

object{
  this.key
}

object.key;

-object acts as a reusable template, with sample data and logic which you can implement and customize according to requirement .

-hence object is called "pseudo class".

-if object is representing a format of data then it is known as json [javascript object notation]

array of objects:-collection of objects.

syntax:

[
  {},
  {},
]

-----------L-59 end here-----------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~

AJAX calls in javascript with fetch method:-

-Ajax is a asynchronous javascript function and XML.
-it allow partial post back. it can post only a specific portion of page.
-it uses "XmlHttpRequest" object.
-JavaScript provide the "fetch" method which uses a synchronous request for fetching data from api.


syntax:

fetch("url").then(function(){get data}).then(function(){convert to json})

distributed computing :-

- two applications running on different machine can share information b/w them.

eg:-
COBRA
DCOM 
RMI
EJB
REMOTING
WEB SERVICES [API]

There are three specification :-

1.) SOAP:
  
  consumer => XML request <=>XML response <= provider

 2.) REST:
     consumer =>Query request <=> XML response <= provider

 3.) JSON:
         consumer => JSON request <=> json response <= provider


~~~~~~~~~L-60 end here~~~~~~~~~~

Non Primitive types:~

1.array
2.object
3.map

Q.) What is Map type?
    - map is similar to object with key and value collection.

Q.) What is difference between map and object ?

1.)
 -[Object]=>key and value collection

 -[map]=>key and value collection.

2.) 
-[Object]=>key is only string type.
-[map]=>key can be any type 

3.) 
 -[Object]=>you need explicit iterator   to read keys and values.
 eg:~ {for..in loop}
 -[map]=>provide implicit iterator to read keys and values.
eg:~ {keys(),values(),entries()}

4.)
-[Object]=>slow in accessing.
-[map]=>faster than object.

5.)
-[Object]=>size of keys is unknown .
-[map]=>allow to access size of keys.

Map Method:~
--------------

1.) set()
   -add a new value 
2.) get()
   -fetch the value by using key reference
3.)keys()
   -return all the keys.
4.)values()
   -return all values.
5.)entries()
   -return both the keys and values.
6.)delete()
   -delete specific key
7.)clear()
   -delete all entries.


#Date type:~
--------------

-JavaScript date values are defined by using "Date()" constructor.

-it will loads the current date and time into memory.

var now = new Date();

- you can configure date and time by using
date value constructor.

var now = new Date("2022-06-19");

-you can access the date and time by using:-

1).getHours()~return hour number in 24 hr format.

2.)getMinutes()~return minute number 0-59

3.)getSeconds()~return second number 0-59

4.)getMilliseconds()~return milliseconds number 0-99

5.)getDate()~return date number.

6.)getDay()~return weekday number[0=sunday]

7.)getMonth()~return month number [0=january]

8.)getFullYear()~return full year number[2022]

9.)toLocaleDateString()~return complete date .

10.)toLocaleTimeString()~return complete time.


#JavaScript timer events :~

-setInterval();
-setTimeout();
-clearTimeout();
-clearInterval();


-setInterval();
  => it is used to perform specific task repeatedly at given time interval.

syntax:
setInterval(functionName,timeInterval);


 